#Develop and implement a program to execute the perceptron learning algorithm customize to train a single layer perceptron for binary classification create ropbust algorithm that refines the models weights iteratively resultinmg in a proefficient single layer perceptron capable of effectively handling binary classification challenges
import numpy as np
class Perceptron:
    def __init__(self, learning_rate=0.01, n_iterations=1000):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
    
        self.weights = np.zeros(n_features)
        self.bias = 0
  
        for _ in range(self.n_iterations):
            for idx, x_i in enumerate(X):
                linear_output = np.dot(x_i, self.weights) + self.bias
                y_predicted = self._activation_function(linear_output)

                update = self.learning_rate * (y[idx] - y_predicted)
                self.weights += update * x_i
                self.bias += update

    def _activation_function(self, x):
        return 1 if x >= 0 else 0

    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        y_predicted = [self._activation_function(x) for x in linear_output]
        return np.array(y_predicted)
if __name__ == "__main__":
    X = np.array([[0, 0],
                  [0, 1],
                  [1, 0],
                  [1, 1]])
    
    y = np.array([0, 0, 0, 1]) 
    perceptron = Perceptron(learning_rate=0.1, n_iterations=10)
    
    perceptron.fit(X, y)

    predictions = perceptron.predict(X)
    
    print("Predictions:", predictions)

    
