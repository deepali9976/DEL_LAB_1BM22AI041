from IPython import get_ipython
from IPython.display import display
# %%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense , LSTM, Dropout
# %%
data = pd.read_csv("/content/goog.csv")
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace = True)
# %%
plt.figure(figsize=(10, 6))
plt.plot(data['Close'], label='Close Price')
plt.title('Stock Price Over Time')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# %%
scaler = MinMaxScaler(feature_range = (0,1))
data_scaled = scaler.fit_transform(data['Close'].values.reshape(-1,1))
# %%
sequence_length = 60

def create_dataset (data,sequence_length):
  X,y = [],[]
  for i in range(len(data) - sequence_length):
    X.append(data[i:i+sequence_length])
    y.append(data[i+sequence_length])
  return np.array(X), np.array(y)
# %%
X, y = create_dataset(data_scaled, sequence_length)
X = X.reshape((X.shape[0], X.shape[1], 1))
# %%
train_size = max(1, int(len(X) * 0.8))  # Ensure at least one sample in train set
#X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1)) # No need for this line as X_test is not yet defined
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1)) #Reshape X_test after it is defined
# %%
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(25))
model.add(Dense(1))

# %%
from tensorflow.keras.optimizers import Adam

optimizer = Adam(clipvalue=1.0)  # Limits gradients to 1.0
model.compile(optimizer=optimizer, loss='mean_squared_error')

# %%
print(f"X_train shape: {X_train.shape}")
print(f"y_train shape: {y_train.shape}")

# %%
history = model.fit(X_train, y_train, batch_size=64, epochs=50, validation_data=(X_test, y_test))

# %%
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# %%
# Get the dates corresponding to the test set
test_dates = data.index[train_size + sequence_length:]  # Adjust for sequence length

# Plot the actual vs. predicted prices
plt.figure(figsize=(10, 6))
plt.plot(test_dates, y_test_actual, label='Actual Price')
plt.plot(test_dates, predictions, label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# %%
